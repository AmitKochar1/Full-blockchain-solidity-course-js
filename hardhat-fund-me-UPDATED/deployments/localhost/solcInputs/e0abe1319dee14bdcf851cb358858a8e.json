{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n//pragma version\n\n//imports\nimport \"./PriceConverter.sol\";\n\n//error messages\nerror FundMe__NotOwner();\n\n//interfaces, libraries, contracts\n\n/** @title A contract for crowd funding\n *  @author BlockHunt\n *  @notice This contract is to demo a sample funding contract\n *  @dev  This implement price feeds as our library\n */\n\ncontract FundMe {\n    //type Declarations\n    using PriceConverter for uint256;\n\n    //State Variables\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n\n    // Could we make this constant?\n    address public immutable i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n\n    AggregatorV3Interface private s_priceFeed;\n    // Events (we have none!)\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    /**\n     *  @notice This function funds the contract\n     *  @dev  This function allows users to fund\n     */\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n        s_addressToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public payable onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function getFundersAmount(address _funders) public view returns (uint256) {\n        return s_addressToAmountFunded[_funders];\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n\n// Functions Order:\n//// constructor\n//// receive\n//// fallback\n//// external\n//// public\n//// internal\n//// private\n//// view / pure\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        return uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        return ethAmountInUsd;\n    }\n}\n\n// library PriceConverter {\n//     // We could make this public, but then we'd have to deploy it\n//     function getPrice() internal view returns (uint256) {\n//         // Goerli ETH / USD Address\n//         // https://docs.chain.link/docs/ethereum-addresses/\n//         AggregatorV3Interface priceFeed = AggregatorV3Interface(\n//             0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n//         );\n//         (, int256 answer, , , ) = priceFeed.latestRoundData();\n//         // ETH/USD rate in 18 digit\n//         return uint256(answer * 10000000000);\n//         // or (Both will do the same thing)\n//         // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\n//     }\n\n//     // 1000000000\n//     function getConversionRate(\n//         uint256 ethAmount\n//     ) internal view returns (uint256) {\n//         uint256 ethPrice = getPrice();\n//         uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n//         return ethAmountInUsd;\n//     }\n\n// }\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}